% Function that contains the final neural network generated by matlab function genFunction

function [Y,Xf,Af] = finalNeuralNetworkFunction(X,~,~)
% Neural network simulation function.
% Auto-generated by MATLAB, 03-Jun-2020 11:23:57.
% 
% [Y] = finalNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 24xQ matrix, input 1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output 1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.


% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [0.73378642211204969659;1.466794943975455956];
IW1_1 = [0.18462678341991234365 0.46160161070504956982 -0.0040863311570775821824 -1.0899864871380930964 0.40303008287692432265 1.7896099020053286566 -1.5520230607687903746 -1.1071014447816509563 0.71938645331911099667 -0.15726337604657586455 -0.38373682397681085909 0.62063861702779454799 -0.232373933200597238 0.68074414585752640594 0.044992231968219720262 -0.7442524309168595531 -0.20305596820892987675 1.0045986864037748099 0.0088317373129485031436 -0.10226491053988291668 -0.25230752593688626773 -0.74461525158974339877 -0.60789584519611283842 0.49368444037784037226;-0.32785657203897183853 0.43324644006769325033 0.43910225041262868073 0.7558483237057420645 -0.46233873373962292019 -0.17733812578968344287 -0.11159188763981477133 0.76651762768569409179 -0.37162743428760153241 0.18179989422668349497 -0.15631618643375494448 -0.72280905917984838993 0.0068705016744665982353 0.17003323997024663572 -0.38987878156102090399 0.55928595766411426382 0.073937812212620607211 -0.15511471984301861138 -0.67340728601662136477 0.12064182765179325141 0.55229115824395358381 0.1900708672072552452 0.26041435542739554965 -0.4193437531999352208];

% Layer 2
b2 = [-2.1673511053984011454;2.5237514962360938497];
LW2_1 = [-1.968572081081803038 -3.0161483044465300374;3.2399633729596248877 2.7607583741361501062];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    % no processing
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*X{1,ts});
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
